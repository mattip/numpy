.. _numpyrandom:

.. currentmodule:: numpy.random

numpy.random
============

Numpy's random number routines produce psuedo random numbers using
combinations of generators and distributions:

* Generators: Objects that generate random numbers. These are typically
  unsigned integer words filled with sequences of either 32 or 64 random bits.
* Distributions: Objects that transform sequences of random bits from a
  generator into sequences of numbers that follow a specific probability
  distribution (such as uniform, Normal or Binomial) within a specified
  interval.

Since Numpy version 1.17.0 the `RandomGenerator` can be initialized with a
number of different Random Number Generators (RNG)s, and exposes many
different probability distributions. See
`NEP 19 <https://www.numpy.org/neps/nep-0019-rng-policy.html>`_ for context on
the updated random Numpy number routines. The legacy `mtrand.RandomState`
random number routines are still available, but limited to a single generator.

For convenience and backward compatibility, a single `mtrand.RandomState`
instance's methods are imported into the numpy.random namespace, see
:ref:`legacy` for the complete list.

Quick Start
-----------

By default, `RandomGenerator` uses normals provided by
`xoroshiro128.Xoroshiro128` which will be faster than the legacy methods in
`mtrand.RandomState`

.. code-block:: python

  # As replacement for numpy.random.RandomState
  from numpy import random
  random.standard_normal()

`RandomGenerator` can be used as a direct replacement for
`~RandomState`, although the random values are generated by
`~xoroshiro128.Xoroshiro128`. The `RandomGenerator` holds an instance of a RNG.
It is accessable as ``gen.bit_generator``.

.. code-block:: python

  # As replacement for RandomState()
  from numpy.random import RandomGenerator
  rg = RandomGenerator()
  rg.standard_normal()


Seeds can be passed to any of the basic RNGs. Here `mt19937.MT19937` is used
and the ``RandomGenerator`` is accessed via the attribute `mt19937.MT19937.
generator`.

.. code-block:: python

  from numpy.random import MT19937
  rg = MT19937(12345).generator
  rg.standard_normal()


Introduction
------------
RandomGen takes a different approach to producing random numbers from the
:class:`numpy.random.RandomState` object.  Random number generation is
separated into two components, a bit generator and a random generator.

The bit generator has a limited set of responsibilities. It manages state
and provides functions to produce random doubles and random unsigned 32- and
64-bit values. The bit generator also handles all seeding which varies with
different bit generators.

The `random generator <~RandomGenerator>` takes the
bit generator-provided stream and transforms them into more useful
distributions, e.g., simulated normal random values. This structure allows
alternative bit generators to be used with little code duplication.

The ``RandomGenerator`` is the user-facing object
that is nearly identical to :class:`~.RandomState`. The canonical
method to initialize a generator passes a `~mt19937.MT19937` bit generator, the
underlying bit generator in Python -- as the sole argument. Note that the bit
generator must be instantiated.

.. code-block:: python

  from numpy.random import RandomGenerator, MT19937
  rg = RandomGenerator(MT19937())
  rg.random_sample()

Seed information is directly passed to the bit generator.

.. code-block:: python

  rg = RandomGenerator(MT19937(12345))
  rg.random_sample()

What's New or Different
~~~~~~~~~~~~~~~~~~~~~~~
.. warning::

  The Box-Muller method used to produce NumPy's normals is no longer available
  in `~.RandomGenerator`.  It is not possible to reproduce the exact random
  values using ``RandomGenerator`` for the normal distribution or any other
  distribution that relies on the normal such as the `numpy.random.gamma` or
  `numpy.random.standard_t`. If you require bitwise backward compatible
  streams, use `~.mtrand.RandomState`.

* The normal, exponential and gamma generators use 256-step Ziggurat
  methods which are 2-10 times faster than NumPy's Box-Muller or inverse CDF
  implementations.
* Optional ``dtype`` argument that accepts ``np.float32`` or ``np.float64``
  to produce either single or double prevision uniform random variables for
  select distributions
* Optional ``out`` argument that allows existing arrays to be filled for
  select distributions
* `~entropy.random_entropy` provides access to the system
  source of randomness that is used in cryptographic applications (e.g.,
  ``/dev/urandom`` on Unix).
* All bit generators can produce doubles, uint64s and uint32s via CTypes
  (`~xoroshiro128.Xoroshiro128.ctypes`) and CFFI
  (:meth:`~xoroshiro128.Xoroshiro128.cffi`). This allows the bit generators to
  be used in numba.
* The bit generators can be used in downstream projects via
  :ref:`Cython <randomgen_cython>`.

See :ref:`new-or-different` for a complete list of improvements and
differences from the traditional ``Randomstate``.

Parallel Generation
~~~~~~~~~~~~~~~~~~~

The included generators can be used in parallel, distributed applications in
one of two ways:

* :ref:`independent-streams`
* :ref:`jump-and-advance`

Supported Generators
--------------------
The included bit generators are:

* MT19937 - The standard Python generator.  Produces identical results to Python
  using the same seed/state. Adds a
  `~mt19937.MT19937.jump` function that advances the
  generator as-if ``2**128`` draws have been made.
* dSFMT - SSE2 enabled versions of the MT19937 generator.  Theoretically
  the same, but with a different state and so it is not possible to produce a
  sequence identical to MT19937. Supports ``jump`` and so can
  be used in parallel applications. See the `dSFMT authors' page`_.
* XoroShiro128+ - Improved version of XorShift128+ with better performance
  and statistical quality. Like the XorShift generators, it can be jumped
  to produce multiple streams in parallel applications. See
  `~xoroshiro128.Xoroshiro128.jump` for details.
  More information about this bit generator is available at the
  `xorshift, xoroshiro and xoshiro authors' page`_.
* XorShift1024*Ï† - Fast fast generator based on the XSadd
  generator. Supports ``jump`` and so can be used in
  parallel applications. See the documentation for
  `~xorshift1024.Xorshift1024.jump` for details. More
  information about these bit generators is available at the
  `xorshift, xoroshiro and xoshiro authors' page`_.
* Xorshiro256** and Xorshiro512** - The most recently introduced XOR,
  shift, and rotate generator. Supports ``jump`` and so can be used in
  parallel applications. See the documentation for
  `~xoshiro256starstar.Xoshirt256StarStar.jump` for
  details. More information about these bit generators is available at the
  `xorshift, xoroshiro and xoshiro authors' page`_.
* ThreeFry and Philox - counter-based generators capable of being advanced an
  arbitrary number of steps or generating independent streams. See the
  `Random123`_ page for more details about this class of bit generators.

.. _`dSFMT authors' page`: http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/SFMT/
.. _`xorshift, xoroshiro and xoshiro authors' page`:  http://xoroshiro.di.unimi.it/
.. _`Random123`: https://www.deshawresearch.com/resources_random123.html

Random Generator
----------------
.. toctree::
   :maxdepth: 1

   generator
   legacy mtrand <legacy>

Bit Generators
--------------

.. toctree::
   :maxdepth: 1

   Bit Generators <brng/index>

Features
--------
.. toctree::
   :maxdepth: 2

   Parallel Applications <parallel>
   Multithreaded Generation <multithreading>
   new-or-different
   Comparing Performance <performance>
   extending
   Reading System Entropy <entropy>

Original Source
~~~~~~~~~~~~~~~

This package was developed independently of NumPy and was integrated in version
1.17.0. The original repo is at https://github.com/bashtage/randomgen.
